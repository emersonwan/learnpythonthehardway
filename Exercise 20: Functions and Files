# -*- coding: utf-8 -*-
# Precisa existir um arquivo chamado test.txt com três frases
# Rodar como: python lpthw.py test.txt
print "\nExercício 20" # Exercício 20
from sys import argv

script, input_file = argv # script = nome do arquivo atual
# input_file = nome do arquivo a se extrair o texto

def print_all(f): # Esta função imprime o arquivo do texto
    print f.read()

def rewind(f): # O método seek move o arquivo "f" para o byte zero (primeiro byte)
    f.seek(0) # O método seek() mede bytes, não linhas

def print_a_line(line_count, f): # A função print_a_line imprime cada linha do arquivo "f"
    print line_count, f.readline(), # Imprime o número da linha + o conteúdo da linha
# A variável line_count não tem nada a ver com a linha do readline. Cada vez que readline lê uma linha,
# ele avança para a próxima linha independente de count_line
# A vírgula ao final de print foi colocada senão readline retorna o \n contido no arquivo "f" pulando uma linha
# O método readline() escanea cada byte do arquivo # até encontrar um caractere \n e aí pára de ler o arquivo para retornar
# o que encontrou até o momento. # O arquivo "f" é responsável por manter a posição corrente no arquivo
# após cada chamada de readline() para que ele continue a ler cada linha.

current_file = open(input_file) # current_file abre o arquivo texto

print "First let's print the whole file:\n"

print_all(current_file) # Chama a função imprime todo o arquivo texto

print "Now let's rewind, kind of like a tape."

rewind(current_file) # Chama a função rewind com o aquivo input_file.
#  Input_file precisa estar aberto

print "Let's print three lines:"

current_line = 1 # Indica que a primeira linha vai ser lida
print_a_line(current_line, current_file)

current_line += 1 # Indica que a próxima linha vai ser lida
print_a_line(current_line, current_file)

current_line += 1 # Indica que a próxima linha vai ser lida
print_a_line(current_line, current_file)
